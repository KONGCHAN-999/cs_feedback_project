"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactPluginSystemPage = void 0;
const messages_1 = require("../messages");
const chalk_1 = __importDefault(require("chalk"));
const TIMEOUT_MS = 10000;
const UPLOAD_TIMEOUT_MS = 60000;
const IMPORT_BUTTON_SELECTOR = "button[data-testid='PluginImportButton']";
const IMPORT_PLUGIN_DIALOG_SELECTOR = "//div[@data-testid='ImportDialog']//div[contains(@class,'_dialogContent')]";
const FILE_SELECTOR = "label[data-testid='FileSelector'] > input[type='file']";
const IMPORT_BUTTON_IN_DIALOG_SELECTOR = "//div[@data-testid='ImportDialog']//div[contains(@class,'_footer')]//button[1]";
class ReactPluginSystemPage {
    readyForImportButton(page, boundMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield page.waitForSelector(IMPORT_BUTTON_SELECTOR, {
                    timeout: TIMEOUT_MS,
                });
            }
            catch (e) {
                throw chalk_1.default.red(boundMessage("Error_notDisplayImportButton"));
            }
        });
    }
    upload(page, pluginPath, lang) {
        return __awaiter(this, void 0, void 0, function* () {
            const boundMessage = (0, messages_1.getBoundMessage)(lang);
            console.log(`Trying to upload ${pluginPath}`);
            yield page.click(IMPORT_BUTTON_SELECTOR);
            yield page.waitForSelector(`xpath/${IMPORT_PLUGIN_DIALOG_SELECTOR}`, {
                timeout: TIMEOUT_MS,
            });
            const file = yield page.$(FILE_SELECTOR);
            if (file === null) {
                throw new Error('input[type="file"] is not found');
            }
            yield file.uploadFile(pluginPath);
            yield page.click(`xpath/${IMPORT_BUTTON_IN_DIALOG_SELECTOR}`);
            yield page.waitForSelector(`xpath/${IMPORT_BUTTON_IN_DIALOG_SELECTOR}`, {
                hidden: true,
                timeout: UPLOAD_TIMEOUT_MS,
            });
            console.log(`${pluginPath} ${boundMessage("Uploaded")}`);
        });
    }
}
exports.ReactPluginSystemPage = ReactPluginSystemPage;
//# sourceMappingURL=ReactPluginSystemPage.js.map