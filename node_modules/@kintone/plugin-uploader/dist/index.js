"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_1 = __importDefault(require("fs"));
const messages_1 = require("./messages");
const PluginSystemController_1 = __importDefault(require("./controllers/PluginSystemController"));
const run = (baseUrl, userName, password, pluginPath, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { lang, basicAuth } = options;
    const boundMessage = (0, messages_1.getBoundMessage)(lang);
    const browserOptions = {
        proxy: options.proxyServer,
        ignoreDefaultArgs: options.puppeteerIgnoreDefaultArgs,
    };
    const pluginSystemController = new PluginSystemController_1.default();
    yield pluginSystemController.launchBrowser(browserOptions);
    try {
        yield pluginSystemController.openNewPage();
        yield pluginSystemController.readyForUpload({
            baseUrl,
            userName,
            password,
            lang,
            basicAuth,
        });
        yield pluginSystemController.upload(pluginPath, lang);
        if (options.watch) {
            let uploading = false;
            fs_1.default.watch(pluginPath, () => __awaiter(void 0, void 0, void 0, function* () {
                if (uploading) {
                    return;
                }
                try {
                    uploading = true;
                    yield pluginSystemController.upload(pluginPath, lang);
                }
                catch (e) {
                    console.log(e);
                    console.log(boundMessage("Error_retry"));
                    yield pluginSystemController.closeBrowser();
                    yield pluginSystemController.launchBrowser(browserOptions);
                    yield pluginSystemController.openNewPage();
                    yield pluginSystemController.readyForUpload({
                        baseUrl,
                        userName,
                        password,
                        lang,
                        basicAuth,
                    });
                    yield pluginSystemController.upload(pluginPath, lang);
                }
                finally {
                    uploading = false;
                }
            }));
        }
        else {
            yield pluginSystemController.closeBrowser();
        }
    }
    catch (e) {
        console.error(boundMessage("Error"), e);
        yield pluginSystemController.closeBrowser();
        // eslint-disable-next-line n/no-process-exit
        process.exit(1);
    }
});
exports.run = run;
//# sourceMappingURL=index.js.map