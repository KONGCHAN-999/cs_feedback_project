"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControllerBase = void 0;
const puppeteer_1 = __importDefault(require("puppeteer"));
const chalk_1 = __importDefault(require("chalk"));
const TIMEOUT_MS = 10000;
class ControllerBase {
    get browser() {
        if (this._browser === undefined) {
            throw new Error("Browser is not launched yet. Please call launchBrowser() first.");
        }
        return this._browser;
    }
    set browser(value) {
        this._browser = value;
    }
    get page() {
        if (this._page === undefined) {
            throw new Error("Page is not opened yet. Please call openNewPage() first.");
        }
        return this._page;
    }
    set page(value) {
        this._page = value;
    }
    launchBrowser() {
        return __awaiter(this, arguments, void 0, function* (options = {}) {
            const args = options.proxy ? [`--proxy-server=${options.proxy}`] : [];
            this._browser = yield puppeteer_1.default.launch({
                args,
                ignoreDefaultArgs: options.ignoreDefaultArgs,
                headless: "shell",
            });
        });
    }
    closeBrowser() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.browser.close();
        });
    }
    openNewPage() {
        return __awaiter(this, void 0, void 0, function* () {
            this._page = yield this.browser.newPage();
        });
    }
    login(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { baseUrl, userName, password, boundMessage, basicAuth } = options;
            const loginUrl = `${baseUrl}/login?saml=off`;
            if (basicAuth) {
                yield this.page.authenticate(basicAuth);
            }
            console.log(`Open ${loginUrl}`);
            yield this.page.goto(loginUrl);
            try {
                yield this.page.waitForSelector(".form-username-slash", {
                    timeout: TIMEOUT_MS,
                });
            }
            catch (e) {
                throw chalk_1.default.red(boundMessage("Error_cannotOpenLogin"));
            }
            console.log("Trying to log in...");
            yield this.page.type(".form-username-slash > input.form-text", userName);
            yield this.page.type(".form-password-slash > input.form-text", password);
            yield this.page.click(".login-button");
            try {
                yield this.page.waitForNavigation({
                    timeout: TIMEOUT_MS,
                    waitUntil: "domcontentloaded",
                });
            }
            catch (e) {
                throw chalk_1.default.red(boundMessage("Error_failedLogin"));
            }
        });
    }
}
exports.ControllerBase = ControllerBase;
//# sourceMappingURL=ControllerBase.js.map